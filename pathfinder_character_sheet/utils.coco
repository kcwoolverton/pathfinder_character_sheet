def get_stat_modifier(stat_value):
    return (stat_value - 10) // 2

def make_mod_text(mods) -> str:
    output = []
    for mod in mods:
        mod_str = str(mod)
        if int(mod) >= 0:
            mod_str = "+" + str(mod)
        output.append(mod_str)

    return "/".join(output)

def roll_dice(rng, die_type, num_dice, num_rolls) -> list[int]:
    rolls = []
    for _ in range(num_rolls):
        result = 0
        for _ in range(num_dice):
            result += rng.randint(1, die_type)
        rolls.append(result)
    return rolls

def make_roll_result_text(rolls: list[int], modifiers: list[int]) -> str:
    text = []
    for i in range(len(rolls)):
        text.append(f"Result: {rolls[i]} + {modifiers[i]} = {rolls[i] + modifiers[i]}")
    return "<br>".join(text)

def get_attack_info(attack_info_str: str) -> (str; str; int):
    num_dice, die, modifier = "", "", ""
    curr_val = ""
    for char in attack_info_str:
        if num_dice == "":
            if char == 'd':
                num_dice = curr_val
                curr_val = ""
            else:
                curr_val += char
        elif die == "":
            if char == '+' or char == '-':
                die = curr_val
                curr_val = char
            else:
                curr_val += char
        else:
            if not char == " ":
                curr_val += char
    if not die:
        die = curr_val
        modifier = 0
    else:
        modifier = curr_val
    return num_dice, die, modifier
