from enum import Enum
from random import Random

import justpy as jp
from pathfinder_character_sheet.character_sheet_parser import *

def make_roll_button(rng, roll_modal, text="", modifier=0, die=20, num_die=1):
    button = jp.Button(
            text=text,
            classes="bg-blue-500 text-white rounded px-4 py-2",
            click=toggle_roll_modal$(rng=rng, modifier=modifier, die=die, num_die=num_die)
        )
    button.roll_modal = roll_modal
    return button

def make_title_box(height: str, width: str, title: str):
    box_style = f"background-color: #f9f9f9; border: 1px solid #ccc; shadow-lg; padding: 20px; w-{width}; height: {height}; overflow-y: auto rounded"
    box = jp.Div(classes="border border-gray-300 shadow-lg p-4 rounded-md m-4 flex items-center justify-center", style=box_style)
    title = jp.H2(classes="font-bold mb-2 text-center", text=title)
    box.add(title)
    return box

def make_title_row(char):
    title_row = jp.Div(classes="flex w-full p-4 m-4", style="background-color: #f9f9f9;")
    name_box = make_title_box("50px", "1/8", char.name)
    class_box = make_title_box("50px", "1/4", "".join(char.char_classes) + ': ' + ", ".join(char.archetypes))
    level_box = make_title_box("50px", "1/8", "Level " + str(char.level))
    title_row.add(name_box, class_box, level_box)
    return title_row

def make_useful_info_row(char):
    useful_info_row = jp.Div(classes="flex-col w-full p-4 m-4", style="background-color: #f9f9f9;")

    table = jp.Table(classes="min-w-full bg-white border rounded shadow")
    useful_info_row.add(table)

    thead = jp.Thead(classes="bg-gray-300")
    table.add(thead)
    header_row = jp.Tr()
    thead.add(header_row)

    headers = ["Hit Points", "Initiative", "Armor Class", "Resistances", "Useful Info"]
    for header in headers:
        th = jp.Th(classes="text-left py-2 px-3", text=header)
        header_row.add(th)

    # Table body
    tbody = jp.Tbody()
    table.add(tbody)

    table_row = jp.Tr()
    tbody.add(table_row)

    hit_points_data = jp.Td(classes="border-t py-2 px-3", text=char.max_hp)
    initiative_data = jp.Td(classes="border-t py-2 px-3", text=char.initiative)
    ac_data = jp.Td(classes="border-t py-2 px-3", text=char.ac)
    resistance_data = jp.Td(classes="border-t py-2 px-3", text="")
    info_data = jp.Td(classes="border-t py-2 px-3", text="")

    table_row.add(hit_points_data, initiative_data, ac_data, resistance_data, info_data)
    return useful_info_row

def make_abilities_box(upper_container, char, rng):
    ability_row = jp.Div(classes="flex-col w-full p-4 m-4", style="background-color: #f9f9f9;")

    table = jp.Table(classes="min-w-full bg-white border rounded shadow")
    ability_row.add(table)

    thead = jp.Thead(classes="bg-gray-300")
    table.add(thead)
    header_row = jp.Tr()
    thead.add(header_row)

    headers = ["Ability", "Score", "Modifier"]
    for header in headers:
        th = jp.Th(classes="text-left py-2 px-3", text=header)
        header_row.add(th)

    # Table body
    tbody = jp.Tbody()
    table.add(tbody)

    for ability in Stats:
        tr = jp.Tr()
        tbody.add(tr)
        ability_name = jp.Td(classes="border-t py-2 px-3")
        tr.add(ability_name)
        roll_modal = make_roll_modal(upper_container, [get_stat_modifier(char.stats[ability.value])], die=20, num_die=1, rng=rng)
        button = make_roll_button(rng, roll_modal, text=ability.name, modifier=[get_stat_modifier(char.stats[ability.value])])
        ability_name.add(button)
        score = jp.Td(classes="border-t py-2 px-3", text=str(char.stats[ability.value]))
        tr.add(score)
        modifier = jp.Td(classes="border-t py-2 px-3", text=str(get_stat_modifier(char.stats[ability.value])))
        tr.add(modifier)
    return ability_row

def make_weapons_box(upper_container, char, rng) -> dict[str, ((int; ...); str; str)]:
    weapons_row = jp.Div(classes="flex-col w-full p-4 m-4", style="background-color: #f9f9f9;")

    table = jp.Table(classes="min-w-full bg-white border rounded shadow")
    weapons_row.add(table)

    thead = jp.Thead(classes="bg-gray-300")
    table.add(thead)
    header_row = jp.Tr()
    thead.add(header_row)

    headers = ["Weapon", "Attack Bonus", "Damage", "Crit Multiplier"]
    for header in headers:
        th = jp.Th(classes="text-left py-2 px-3", text=header)
        header_row.add(th)

    # Table body
    tbody = jp.Tbody()
    table.add(tbody)

    for weapon, (attack_bonus, damage, multiplier) in char.weapons.items():
        table_row = jp.Tr()
        tbody.add(table_row)
        weapon_name = jp.Td(classes="border-t py-2 px-3")
        table_row.add(weapon_name)
        num_die, die, modifier = "", "", ""
        curr_val = ""
        for char in damage:
            if num_die == "":
                if char == 'd':
                    num_die = curr_val
                    curr_val = ""
                else:
                    curr_val += char
            elif die == "":
                if char == '+' or char == '-':
                    die = curr_val
                    curr_val = char
                else:
                    curr_val += char
            else:
                if not char == " ":
                    curr_val += char
        modifier = curr_val
        attack_roll_modal = make_roll_modal(upper_container, [*attack_bonus], die=20, num_die=1, rng=rng)
        attack_button = make_roll_button(rng, attack_roll_modal, text=weapon, modifier=[*attack_bonus])
        weapon_name.add(attack_button)
        attack_bonus_cell = jp.Td(classes="border-t py-2 px-3", text="/".join(map(str, attack_bonus)))
        table_row.add(attack_bonus_cell)
        damage_cell = jp.Td(classes="border-t py-2 px-3")
        table_row.add(damage_cell)
        damage_roll_modal = make_roll_modal(upper_container, [int(modifier)], die=int(die), num_die=int(num_die), rng=rng)
        damage_button = make_roll_button(
            rng, damage_roll_modal, text=damage, modifier=[int(modifier)], die=int(die), num_die=int(num_die))
        damage_cell.add(damage_button)
        multiplier_cell = jp.Td(classes="border-t py-2 px-3", text=multiplier)
        table_row.add(multiplier_cell)

    return weapons_row

def make_attack_box(char):
    main_container = jp.Div(classes="flex-col w-full p-4 m-4", style="background-color: #f9f9f9;")
    return main_container

def make_saves_box(upper_container, char, rng):
    save_row = jp.Div(classes="flex-col w-full p-4 m-4", style="background-color: #f9f9f9;")

    table = jp.Table(classes="min-w-full bg-white border rounded shadow")
    save_row.add(table)

    thead = jp.Thead(classes="bg-gray-300")
    table.add(thead)
    header_row = jp.Tr()
    thead.add(header_row)

    headers = ["Saving Throws", "Total"]
    for header in headers:
        th = jp.Th(classes="text-left py-2 px-3", text=header)
        header_row.add(th)

    # Table body
    tbody = jp.Tbody()
    table.add(tbody)

    for throw in SavingThrows:
        tr = jp.Tr()
        tbody.add(tr)
        throw_name = jp.Td(classes="border-t py-2 px-3")
        tr.add(throw_name)
        roll_modal = make_roll_modal(upper_container, [char.saving_throws[throw.value]], die=20, num_die=1, rng=rng)
        button = make_roll_button(rng, roll_modal, text=throw.name, modifier=[char.saving_throws[throw.value]])
        throw_name.add(button)
        total = jp.Td(classes="border-t py-2 px-3", text=str(char.saving_throws[throw.value]))
        tr.add(total)
    return save_row

def make_lang_box(char):
    lang_row = jp.Div(classes="flex-col w-full p-4 m-4", style="background-color: #f9f9f9;")

    table = jp.Table(classes="min-w-full bg-white border rounded shadow")
    lang_row.add(table)

    thead = jp.Thead(classes="bg-gray-300")
    table.add(thead)
    header_row = jp.Tr()
    thead.add(header_row)

    headers = ["Languages"]
    for header in headers:
        th = jp.Th(classes="text-left py-2 px-3", text=header)
        header_row.add(th)

    # Table body
    tbody = jp.Tbody()
    table.add(tbody)

    for lang in char.languages:
        table_row = jp.Tr()
        tbody.add(table_row)
        language = jp.Td(classes="border-t py-2 px-3", text=lang)
        table_row.add(language)

    return lang_row

def make_skills_box(upper_container, char, rng):
    skills_row = jp.Div(classes="flex-col w-full p-4 m-4", style="background-color: #f9f9f9;")

    table = jp.Table(classes="min-w-full bg-white border rounded shadow")
    skills_row.add(table)

    thead = jp.Thead(classes="bg-gray-300")
    table.add(thead)
    header_row = jp.Tr()
    thead.add(header_row)

    headers = ["Skill", "Modifier"]
    for header in headers:
        th = jp.Th(classes="text-left py-2 px-3", text=header)
        header_row.add(th)

    # Table body
    tbody = jp.Tbody()
    table.add(tbody)

    for skill, modifier in char.skills.items():
        table_row = jp.Tr()
        tbody.add(table_row)
        skill_name = jp.Td(classes="border-t py-2 px-3")
        table_row.add(skill_name)
        roll_modal = make_roll_modal(upper_container, [modifier], die=20, num_die=1, rng=rng)
        button = make_roll_button(rng, roll_modal, text=skill, modifier=[modifier])
        skill_name.add(button)
        modifier_cell = jp.Td(classes="border-t py-2 px-3", text=modifier)
        table_row.add(modifier_cell)

    return skills_row

def make_large_row(upper_container, char, rng):
    main_row = jp.Div(classes="flex w-full p-4 m-4", style="background-color: #f9f9f9;")

    abilities_attack_and_weapons_column = jp.Div(classes="flex flex-col w-1/3 gap-4")
    abilities_box = make_abilities_box(upper_container, char, rng)
    weapons_box = make_weapons_box(upper_container, char, rng)
    attack_box = make_attack_box(char)
    abilities_attack_and_weapons_column.add(abilities_box, weapons_box, attack_box)

    saves_langs_and_proficiencies_col = jp.Div(classes="flex flex-col w-1/3 gap-4")
    saves_box = make_saves_box(upper_container, char, rng)
    # proficiencies_box = make_proficiencies_box(char)
    lang_box = make_lang_box(char)
    saves_langs_and_proficiencies_col.add(saves_box, lang_box)

    skills_col = jp.Div(classes="flex flex-col w-1/3 gap-4")
    skills_col.add(make_skills_box(upper_container, char, rng))

    main_row.add(abilities_attack_and_weapons_column, saves_langs_and_proficiencies_col, skills_col)
    return main_row

def toggle_roll_modal(self, msg, rng, die, num_die, modifier):
    if not self.roll_modal.show:
        rolls = []
        for mod in modifier:
            result = 0
            for _ in range(int(num_die)):
                result += rng.randint(1, int(die))
            rolls.append(result)
        text = []
        for i in range(len(rolls)):
            text.append("Result: " + str(rolls[i]) + " + " + str(modifier[i]) + " = " + str(rolls[i] + modifier[i]))
        self.roll_modal.content.text = "\n".join(text)
    self.roll_modal.show = not self.roll_modal.show

def make_roll_modal(upper_container, modifier, die, num_die, rng):
    print("here")
    modal_backdrop = jp.Div(classes="fixed w-full h-full top-0 left-0 flex items-center justify-center bg-black bg-opacity-50", show=False)
    upper_container.add(modal_backdrop)

    modal_content = jp.Div(classes="bg-white rounded shadow-lg w-1/3 p-8 m-4 relative")
    modal_backdrop.add(modal_content)
    modal_title = jp.H1(text=f"Roll", classes="text-xl font-bold mb-4")
    modal_content.add(modal_title)
    rolls = []
    for mod in modifier:
        result = 0
        for _ in range(int(num_die)):
            result += rng.randint(1, int(die))
        rolls.append(result)
    text = []
    for i in range(len(rolls)):
        text.append("Result: " + str(rolls[i]) + " + " + str(modifier[i]) + " = " + str(rolls[i] + modifier[i]))
    modal_text = jp.P(text="\n".join(text), classes="mb-4")
    modal_content.add(modal_text)
    modal_backdrop.content = modal_text

    # Close button inside the modal
    close_button = jp.Button(
        text="Close", classes="bg-red-500 text-white px-4 py-2",
        click=toggle_roll_modal$(rng=rng, modifier=[modifier], die=20, num_die=1)
    )
    close_button.roll_modal = modal_backdrop
    modal_content.add(close_button)

    return modal_backdrop
