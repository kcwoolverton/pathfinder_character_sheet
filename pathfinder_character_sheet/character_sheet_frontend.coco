from enum import Enum
from random import Random

import justpy as jp
from pathfinder_character_sheet.character_sheet_parser import *
from pathfinder_character_sheet.character import *
from pathfinder_character_sheet.utils import *
from pathfinder_character_sheet.styles import *

# Fix vision
# Make look not bad
# Readme

def make_table(headers, classes=table_classes):
    table = jp.Table(classes=classes, style=table_style)

    table_header = jp.Thead(classes=header_row_classes)
    table.add(table_header)
    header_row = jp.Tr()
    table_header.add(header_row)

    for header in headers:
        th = jp.Th(classes=header_cell_classes, text=header)
        header_row.add(th)

    # Table body
    table_body = jp.Tbody()
    table.add(table_body)

    return table, table_body

def make_cell_style_class():
    return cell_classes

def make_button_div():
    return jp.Td(classes=make_cell_style_class(), style=cell_style)

def make_cell_div(text):
    return jp.Td(classes=make_cell_style_class(), style=cell_style, inner_html=text)

def make_row_flex_div():
    return jp.Div(classes=flex_row_classes, style=flex_row_style)

def make_one_third_col_div():
    return jp.Div(classes=one_third_col_classes)

def long_rest_click(self, msg, char):
    for checkbox in self.checkboxes:
        checkbox.checked = False
    self.hp_input.value = f"{char.max_hp}"

def make_checkbox_cell(reset_button, num_checkboxes):
    checkbox_div = jp.Div(classes=checkbox_div_classes, style=checkbox_div_style)
    if num_checkboxes == "At Will":
        return checkbox_div, None
    for i in range(int(num_checkboxes)):
        checkbox = jp.Input(type="checkbox", classes=checkbox_classes, style=checkbox_style, checked=False)
        reset_button.checkboxes.append(checkbox)
        checkbox_div.add(checkbox)
    return checkbox_div, reset_button

def make_title_row(char, reset_button, history_box):
    title_row = make_row_flex_div()
    name_box = make_title_box("50px", "1/8", char.name)
    class_str = f"{', '.join(char.char_classes)}"
    if char.archetypes:
        class_str += ": " + ", ".join(char.archetypes)
    class_box = make_title_box("50px", "1/4", class_str)
    level_box = make_title_box("50px", "1/8", "Level " + str(char.level))
    title_row.add(name_box, class_box, level_box)
    title_row.add(reset_button)
    title_row.add(history_box)
    return title_row

def make_ac_cell(char):
    table, table_body = make_table([], ac_classes)

    total_data = make_cell_div(text=f"Total: {char.ac.total}")
    touch_data = make_cell_div(text=f"Touch: {char.ac.touch}")
    flat_data = make_cell_div(text=f"Flat: {char.ac.flat}")

    table_row = jp.Tr()
    table_row.add(total_data, touch_data, flat_data)

    table_body.add(table_row)

    return table

def make_useful_info_row(upper_container, reset_button, char, rng, history_box):
    useful_info_row = make_col_flex_div()

    headers = ["Hit Points", "Initiative", "Armor Class"]
    if char.immunities:
        headers.append("Immunities")
    if char.resistances:
        headers.append("Resistances")
    if char.damage_reduction:
        headers.append("Dmg Reduction")
    table, table_body = make_table(headers)
    useful_info_row.add(table)

    hit_points_data = jp.Input(
        type='number',
        classes=hit_points_classes,
        style=hit_points_style,
        min=f"-{char.max_hp}",
        value=f"{char.max_hp}",
    )
    reset_button.hp_input = hit_points_data
    roll_modal = make_roll_modal(upper_container, modifier=[char.initiative], rng=rng, history_box=history_box)
    initiative_data = make_roll_cell(
                rng, roll_modal,
                click=toggle_roll_modal$(rng=rng, modifier=[char.initiative], roll_type='Initiative'),
                text=make_mod_text([char.initiative]),
            )
    # ac_data = make_ac_cell(char)
    ac_data = make_cell_div(text=f"Total: {char.ac.total}   |   Touch: {char.ac.touch}   |   Flat: {char.ac.flat}")

    table_row = jp.Tr()
    table_body.add(table_row)

    table_row.add(hit_points_data, initiative_data, ac_data)
    if char.immunities:
        immunity_data = make_cell_div(text="<br>".join(char.immunities))
        table_row.add(immunity_data)
    if char.resistances:
        resistance_data = make_cell_div(text="<br>".join(char.resistances))
        table_row.add(resistance_data)
    if char.damage_reduction:
        reduction_data = make_cell_div(text="<br>".join(char.damage_reduction))
        table_row.add(reduction_data)
    return useful_info_row

def make_abilities_box(upper_container, char, rng, history_box):
    ability_row = make_col_flex_div()

    table, table_body = make_table(["Ability", "Score", "Modifier"])
    ability_row.add(table)

    for ability in Stats:
        table_row = jp.Tr()
        table_body.add(table_row)
        roll_modal = make_roll_modal(
            upper_container,
            modifier=[get_stat_modifier(char.stats[ability.value])],
            rng=rng,
            history_box=history_box
        )
        ability_name = make_roll_cell(
            rng, roll_modal,
            click=toggle_roll_modal$(rng=rng, modifier=[get_stat_modifier(char.stats[ability.value])], roll_type=ability.name),
            text=ability.name,
        )
        table_row.add(ability_name)
        score = make_cell_div(text=str(char.stats[ability.value]))
        table_row.add(score)
        modifier = make_cell_div(text=make_mod_text([get_stat_modifier(char.stats[ability.value])]))
        table_row.add(modifier)
    return ability_row

def make_base_attack_box(upper_container, char, rng, history_box):
    attack_row = make_col_flex_div()
    table, table_body = make_table(["Base Attack", "Attack Bonus"])
    attack_row.add(table)

    melee_row = jp.Tr()
    table_body.add(melee_row)

    melee_modal = make_roll_modal(upper_container, modifier=char.melee, rng=rng, history_box=history_box)
    melee_button = make_roll_cell(
        rng, melee_modal,
        click=toggle_roll_modal$(rng=rng, modifier=char.melee, roll_type="Base Melee"),
        text="Melee",
    )
    melee_row.add(melee_button)
    melee_row.add(make_cell_div(text=make_mod_text(char.melee)))

    ranged_row = jp.Tr()
    table_body.add(ranged_row)

    ranged_modal = make_roll_modal(upper_container, modifier=char.ranged, rng=rng, history_box=history_box)
    ranged_button = make_roll_cell(
        rng, ranged_modal,
        click=toggle_roll_modal$(rng=rng, modifier=char.ranged, roll_type="Base Ranged"),
        text="Ranged",
    )
    ranged_row.add(ranged_button)
    ranged_row.add(make_cell_div(text=make_mod_text(char.ranged)))

    return attack_row

def make_weapons_box(upper_container, char, rng, history_box) -> dict[str, ((int; ...); str; str)]:
    weapons_row = make_col_flex_div()

    table, table_body = make_table(["Weapon", "Attack Bonus", "Damage", "Crit Multiplier"])
    weapons_row.add(table)

    for weapon, (attack_bonus, damage, multiplier) in char.weapons.items():
        table_row = jp.Tr()
        table_body.add(table_row)
        num_dice, die, modifier = get_attack_info(damage)
        attack_roll_modal = make_roll_modal(upper_container, modifier=[*attack_bonus], rng=rng, history_box=history_box)
        weapon_name = make_roll_cell(
            rng, attack_roll_modal,
            click=toggle_roll_modal$(rng=rng, modifier=[*attack_bonus], roll_type=weapon),
            text=weapon,
        )
        table_row.add(weapon_name)
        attack_bonus_cell = make_cell_div(text=make_mod_text(attack_bonus))
        table_row.add(attack_bonus_cell)
        damage_roll_modal = make_roll_modal(
            upper_container,
            modifier=[int(modifier)],
            die=int(die),
            num_dice=int(num_dice),
            rng=rng,
            history_box=history_box
        )
        damage_cell = make_roll_cell(
            rng, damage_roll_modal,
            click=toggle_roll_modal$(
                rng=rng,
                modifier=[int(modifier)],
                die=int(die),
                num_dice=int(num_dice),
                roll_type=f"{weapon} Damage",
            ),
            text=damage,
        )
        table_row.add(damage_cell)
        multiplier_cell = make_cell_div(text=multiplier)
        table_row.add(multiplier_cell)

    return weapons_row

def make_ranged_weapons_box(upper_container, char, rng, history_box):
    weapons_row = make_col_flex_div(overflow=True)
    for weapon_name, weapon_info in char.ranged_weapons.items():
        headers = [weapon_name]
        attack_bonus = [""]
        damage = [""]
        crit = [""]

        for distance, (curr_attack_bonus, curr_damage, curr_crit) in weapon_info.items():
            headers.append(distance)
            attack_bonus.append(curr_attack_bonus)
            damage.append(curr_damage)
            crit.append(curr_crit)

        table, table_body = make_table(headers)
        weapons_row.add(table)
        attack_bonus_row = jp.Tr()
        damage_row = jp.Tr()
        table_body.add(attack_bonus_row, damage_row)

        for i in range(len(headers)):
            if i > 0:
                attack_bonus_modal = make_roll_modal(upper_container, modifier=attack_bonus[i], rng=rng, history_box=history_box)
                attack_bonus_cell = make_roll_cell(
                    rng, attack_bonus_modal,
                    click=toggle_roll_modal$(rng=rng, modifier=attack_bonus[i], roll_type=weapon_name),
                    text=make_mod_text(attack_bonus[i]),
                )
                attack_bonus_row.add(attack_bonus_cell)

                num_dice, die_type, modifier = get_attack_info(damage[i])
                damage_roll_modal = make_roll_modal(
                    upper_container,
                    modifier=[int(modifier)],
                    die=int(die_type),
                    num_dice=int(num_dice),
                    rng=rng,
                    history_box=history_box,
                )
                damage_cell = make_roll_cell(
                    rng, damage_roll_modal,
                    click=toggle_roll_modal$(
                        rng=rng,
                        modifier=[int(modifier)],
                        die=int(die_type),
                        num_dice=int(num_dice),
                        roll_type=f"{weapon_name} Damage",
                    ),
                    text=damage[i],
                )
                damage_row.add(damage_cell)
            else:
                attack_bonus_cell = make_cell_div(text="")
                attack_bonus_row.add(attack_bonus_cell)
                damage_cell = make_cell_div(text="")
                damage_row.add(damage_cell)

    return weapons_row

def make_special_attacks_box(char):
    attacks_row = make_col_flex_div()

    table, table_body = make_table(["Special Attacks"])
    attacks_row.add(table)

    for attack in char.special_attacks:
        table_row = jp.Tr()
        table_body.add(table_row)
        next_row = jp.Tr()
        table_body.add(next_row)
        attack_cell = make_collapsible_comp(table_row, attack.name, attack.description)
        next_row.add(attack_cell)
    return attacks_row

def make_special_qualities_box(char):
    qualities_row = make_col_flex_div()

    table, table_body = make_table(["Special Qualities"])
    qualities_row.add(table)

    for quality in char.special_abilities:
        table_row = jp.Tr()
        table_body.add(table_row)
        next_row = jp.Tr()
        table_body.add(next_row)
        quality_cell = make_collapsible_comp(table_row, quality.name, quality.description)
        next_row.add(quality_cell)
    return qualities_row

def make_roll_cell(rng, roll_modal, click, text=""):
    click = safe_call$(click) ..> print
    cell = jp.Td(
        text=text,
        classes=roll_cell_classes,
        style=roll_cell_style,
        click=click,
    )
    cell.roll_modal = roll_modal
    return cell

def make_collapsible_button_cell(click, text="", spell=False):
    classes = collapse_button_classes
    arrow = jp.I(classes=caret_classes, style=caret_style)
    if spell:
        classes = spell_button_classes
    cell = jp.Td(
        classes=classes,
        style=collapse_button_style,
        click=click$(arrow_div=arrow),
    )
    cell.add(jp.Span(text=f"{text}  "))
    cell.add(arrow)

    return cell

def make_save_text(save_type: str) -> str:
    save_dict = {"fort": "Fortitude", "ref": "Reflex", "will": "Will"}
    return save_dict[save_type]

def make_saves_box(upper_container, char, rng, history_box):
    save_row = make_col_flex_div()

    table, table_body = make_table(["Saving Throws", "Total"])
    save_row.add(table)

    for throw in SavingThrows:
        table_row = jp.Tr()
        table_body.add(table_row)
        roll_modal = make_roll_modal(upper_container, modifier=[char.saving_throws[throw.value]], rng=rng, history_box=history_box)
        button = make_roll_cell(
            rng, roll_modal,
            click=toggle_roll_modal$(rng=rng, modifier=[char.saving_throws[throw.value]], roll_type=make_save_text(throw.name)),
            text=make_save_text(throw.name),
        )
        table_row.add(button)
        total = make_cell_div(text=make_mod_text([char.saving_throws[throw.value]]))
        table_row.add(total)
    if char.conditional_st_modifiers:
        table_row = jp.Tr()
        table_body.add(table_row)
        conditional_modifier_row = make_cell_div(text="<br>".join(char.conditional_st_modifiers))
        table_row.add(conditional_modifier_row)
        table_row.add(make_button_div())
    return save_row

def make_lang_box(char):
    lang_row = make_col_flex_div()

    table, table_body = make_table(["Languages"])
    lang_row.add(table)

    for lang in char.languages:
        table_row = jp.Tr()
        table_body.add(table_row)
        if lang == "Xenophobic":
            lang = "Glorbon"
        language = make_cell_div(text=lang)
        table_row.add(language)

    return lang_row

def make_spell_text(spell: Spell) -> str:
    return f"<b>DC:</b> {spell.dc} | <b>Save:</b> {spell.save_info} | <b>Casting Time:</b> {spell.casting_time} | <b>Target:</b> {spell.target} | <b>Range:</b> {spell.spell_range} | <b>Duration:</b> {spell.duration}<br><br>{spell.effect}"

def toggle_collapsible_content(self, msg, arrow_div):
    if 'hidden' in self.content.classes:
        self.content.remove_class('hidden')
        print(arrow_div.classes)
        arrow_div.remove_class('fa-angle-down')
        arrow_div.classes += " fa-angle-up"
        print(arrow_div.classes)
    else:
        self.content.set_class('hidden')
        print(arrow_div.classes)
        arrow_div.remove_class('fa-angle-up')
        arrow_div.classes += " fa-angle-down"
        print(arrow_div.classes)

def make_collapsible_comp(upper_container, button_name="", inner_text="", spell=False):
    content = jp.Div(inner_html=inner_text, classes='border p-4 hidden')
    button = make_collapsible_button_cell(click=toggle_collapsible_content, text=button_name, spell=spell)
    button.content = content
    upper_container.add(button)

    return content

def make_spells_box(reset_button, char):
    spells_row = make_col_flex_div()
    table, table_body = make_table(["Spell", "Casts", "Level"])
    reset_button.checkboxes = []

    spells_row.add(table)
    button = reset_button
    for spell in char.spells:
        table_row = jp.Tr()
        table_body.add(table_row)
        next_row = jp.Tr()
        table_body.add(next_row)
        spell_cell = make_collapsible_comp(table_row, spell.name, make_spell_text(spell), spell=True)
        next_row.add(spell_cell)
        num_checkboxes = spell.times_memorized
        if spell.level == "0":
            num_checkboxes = 0
        checkboxes, interim_button = make_checkbox_cell(reset_button, num_checkboxes=num_checkboxes)
        if interim_button:
            button = interim_button
        table_row.add(checkboxes)
        table_row.add(make_cell_div(text=spell.level))

    return spells_row, button

def make_spell_like_abilities_box(char):
    spell_like_abilities_row = make_col_flex_div()
    table, table_body = make_table(["Spell-like Abilities"])

    spell_like_abilities_row.add(table)

    table_row = jp.Tr()
    table_body.add(table_row)

    table_row.add(make_cell_div(text=char.spell_like_abilities))

    return spell_like_abilities_row

def make_skills_box(upper_container, char, rng, history_box):
    skills_row = make_col_flex_div()

    table, table_body = make_table(["Skill", "Modifier"])
    skills_row.add(table)

    for skill, modifier in char.skills.items():
        table_row = jp.Tr()
        table_body.add(table_row)
        roll_modal = make_roll_modal(upper_container, modifier=[modifier], rng=rng, history_box=history_box)
        skill_name = make_roll_cell(
            rng, roll_modal,
            click=toggle_roll_modal$(rng=rng, modifier=[modifier], roll_type=skill),
            text=skill,
        )
        table_row.add(skill_name)
        modifier_cell = make_cell_div(text=make_mod_text([modifier]))
        table_row.add(modifier_cell)

    return skills_row

def make_feats_box(char):
    feats_row = make_col_flex_div()
    table, table_body = make_table(["Feats"])

    feats_row.add(table)

    for feat in char.feats:
        table_row = jp.Tr()
        table_body.add(table_row)
        next_row = jp.Tr()
        table_body.add(next_row)
        feat_cell = make_collapsible_comp(table_row, feat.feat_name, feat.feat_benefit)
        next_row.add(feat_cell)

    return feats_row

def make_proficiencies_box(char):
    prof_row = make_col_flex_div()
    table, table_body = make_table(["Weapon Proficiencies"])

    prof_row.add(table)

    table_row = jp.Tr()
    table_body.add(table_row)
    prof_cell = make_cell_div(text=char.weapon_proficiencies)
    table_row.add(prof_cell)

    return prof_row

def make_cmb_and_cmd_box(upper_container, char, rng, history_box):
    cm_row = make_col_flex_div(overflow=True)
    headers = [""]
    cmb = ["CMB"]
    cmd = ["CMD"]

    for cmb_name, value in char.cmb.items():
        table_header = cmb_name.split("_")[0]
        cmd_name = table_header + "_defense"
        headers.append(table_header)
        cmb.append(value)
        cmd.append(char.cmd[cmd_name])

    table, table_body = make_table(headers)
    cm_row.add(table)
    cmb_row = jp.Tr()
    cmd_row = jp.Tr()
    table_body.add(cmb_row, cmd_row)

    for i in range(len(headers)):
        if i != 0:
            cmd_cell = make_cell_div(text=cmd[i])
            cmd_row.add(cmd_cell)
            cmb_roll_modal = make_roll_modal(upper_container, modifier=[int(cmb[i])], rng=rng, history_box=history_box)
            cmb_cell = make_roll_cell(
                rng, cmb_roll_modal,
                click=toggle_roll_modal$(rng=rng, modifier=[int(cmb[i])], roll_type="CMB"),
                text=make_mod_text([cmb[i]]),
            )
            cmb_row.add(cmb_cell)
        else:
            cmd_cell = make_cell_div(text=f"<b>{cmd[i]}</b>")
            cmd_row.add(cmd_cell)
            cmb_cell = make_cell_div(text=f"<b>{cmb[i]}</b>")
            cmb_row.add(cmb_cell)

    return cm_row

def make_large_row(upper_container, reset_button, char, rng, history_box):
    main_row = jp.Div(classes=large_row_classes, style=large_row_style)

    cm_box = make_cmb_and_cmd_box(upper_container, char, rng, history_box)

    special_qualities_box = make_special_qualities_box(char)

    left_col = make_one_third_col_div()
    abilities_box = make_abilities_box(upper_container, char, rng, history_box)
    weapons_box = make_weapons_box(upper_container, char, rng, history_box)
    left_col.add(abilities_box, make_base_attack_box(upper_container, char, rng, history_box), weapons_box)
    if char.ranged_weapons:
        left_col.add(make_ranged_weapons_box(upper_container, char, rng, history_box))
    if char.spells:
        left_col.add(cm_box)
    if char.special_attacks:
        left_col.add(make_special_attacks_box(char))
    if char.special_abilities and char.spells:
        left_col.add(special_qualities_box)
    left_col.add(make_feats_box(char))

    # saves, langs, proficiencies, spells
    middle_col = make_one_third_col_div()
    saves_box = make_saves_box(upper_container, char, rng, history_box)
    spell_like_abilities_box = make_spell_like_abilities_box(char)
    spells_box, button = make_spells_box(reset_button, char)
    middle_col.add(saves_box)

    if not char.spells:
        middle_col.add(cm_box)

    if char.spell_like_abilities:
        middle_col.add(spell_like_abilities_box)

    if char.spells:
        middle_col.add(spells_box)

    if not char.spells and char.special_abilities:
        middle_col.add(special_qualities_box)

    right_col = make_one_third_col_div()
    right_col.add(make_skills_box(upper_container, char, rng, history_box), make_lang_box(char), make_proficiencies_box(char))

    main_row.add(left_col, middle_col, right_col)
    return main_row, button

def toggle_roll_modal(self, msg, rng, die=20, num_dice=1, modifier=[0], roll_type=""):
    if not self.roll_modal.show:
        rolls = roll_dice(rng, die_type=int(die), num_dice=int(num_dice), num_rolls=len(modifier))
        self.roll_modal.content.inner_html = make_roll_result_text(rolls, modifier)
        print(self.roll_modal.history_box.inner_html)
        current_history = self.roll_modal.history_box.inner_html.split('<br>')
        for i in range(len(rolls)):
            current_history.append(f"{roll_type}: {rolls[i]} + {modifier[i]}")
        self.roll_modal.history_box.inner_html = '<br>'.join(current_history).removeprefix("<br>")
        print(self.roll_modal.history_box.inner_html)
    self.roll_modal.show = not self.roll_modal.show

def make_roll_modal(upper_container, rng, modifier=[0], die=20, num_dice=1, history_box=None):
    modal_backdrop = jp.Div(
        classes="fixed w-full h-full top-0 left-0 flex items-center justify-center bg-black bg-opacity-50", show=False)
    upper_container.add(modal_backdrop)

    modal_content = jp.Div(classes="bg-white rounded shadow-lg w-1/3 p-8 m-4 relative")
    modal_backdrop.add(modal_content)
    modal_title = jp.H1(text="Roll", classes="text-xl font-bold mb-4")
    modal_content.add(modal_title)
    rolls = roll_dice(rng, die_type=int(die), num_dice=int(num_dice), num_rolls=len(modifier))
    modal_text = jp.P(text=make_roll_result_text(rolls, modifier), classes="mb-4")
    modal_content.add(modal_text)
    modal_backdrop.content = modal_text
    modal_backdrop.history_box = history_box

    # Close button inside the modal
    close_button = jp.Button(
        text="Close", classes="bg-red-500 text-white px-4 py-2",
        click=toggle_roll_modal$(rng=rng, modifier=[modifier])
    )
    close_button.roll_modal = modal_backdrop
    modal_content.add(close_button)

    return modal_backdrop
