from dataclasses import dataclass
import xml.etree.ElementTree as ET
import argparse
from enum import Enum
from dataclasses import field

class Stats(Enum):
    STR = 0
    DEX = 1
    CON = 2
    INT = 3
    WIS = 4
    CHA = 5

class Movement(Enum):
    Walk = 0
    Climb = 1
    Swim = 2
    Fly = 3

class SavingThrows(Enum):
    fort = 0
    ref = 1
    will = 2

@dataclass
class Spell:
    name: str = ''
    times_memorized: int = 0
    spell_range: str = ''
    casting_time: str = ''
    time_units: str = ''
    dc: int = 0
    duration: str = ''
    effect: str = ''
    target: str = ''
    save_info: str = ''
    level: int = 0

@dataclass
class Character:
    name: str = ''
    level: int = 0
    max_hp: int = 0
    current_hp: int = 0
    ac: (int; int; int) = (0, 0, 0)
    skills: dict[str, int] = field(default_factory=dict)
    # TODO
    conditional_skill_modifiers: (str; ...) = ()
    alignment: str = ''
    char_classes: (str; ...) = ''
    archetypes: (str; ...) = ()
    # TODO: fix vision
    # vision: dict[str, int] = field(default_factory=dict)
    movement: (int; int; int; int) = (0, 0, 0, 0)
    damage_reduction: (str; ...) = ()
    stats: (int; int; int; int; int; int) = (0, 0, 0, 0, 0, 0)
    base_attack_bonus: (int; ...) = ()
    saving_throws: (int; int; int) = (0, 0, 0)
    # TODO
    conditional_st_modifiers: (str; ...) = ()
    melee: (int; ...) = ()
    ranged: (int; ...) = ()
    weapons: dict[str, ((int; ...); str; str)] = field(default_factory=dict)
    # TODO
    # ranged_weapons: dict[str, (int; ...); str; str] = field(default_factory=dict)
    cmb: dict[str, int] = ()
    cmd: dict[str, int] = ()
    spell_resistance: int = 0
    languages: (str; ...) = ()
    gold: int = 0
    curr_gold: int = 0
    ac_bonus: int = 0
    initiative: int = 0
    resistances: (str; ...) = field(default_factory=dict)
    immunities: set[str] = field(default_factory=dict)
    spells: list[Spell] = field(default_factory=list)
    weapon_proficiencies: str = ''
    feats: ((str; str); ...) = ()
    spell_like_abilities: str = ""
    special_abilities: (str; ...) = ()
    special_attacks: (str; ) = ()

def get_stat_modifier(stat_value):
    return (stat_value - 10) // 2

def parse_hp(root: ET.Element) -> int:
    return int(root.find('hit_points/points').text)

def parse_damage_reduction(root: ET.Element) -> (str; ...):
    dr_list = []
    for dr in root.findall('hit_points/damage_reduction'):
        if dr:
            dr_list.append(dr.text)
    return tuple(dr_list)

def parse_ac(root: ET.Element) -> (int; int; int):
    return (
        total=int(root.find('armor_class/total').text),
        flat=int(root.find('armor_class/flat').text),
        touch=int(root.find('armor_class/touch').text),
    )

def parse_name(root: ET.Element) -> str:
    return root.find('basics/name').text

def parse_initiative(root: ET.Element) -> int:
    return int(root.find('initiative/total').text)

def parse_spell_resistance(root: ET.Element) -> int:
    return int(root.find('initiative/spell_resistance').text)

def parse_classes(root: ET.Element):
    class_values = []
    for char_class in root.findall('basics/classes/class'):
        class_values.append(char_class.find("name").text)
    return tuple(class_values)

def parse_skills(root: ET.Element) -> dict[str, int]:
    skills = {}
    for skill in root.findall('skills/skill'):
        skills[skill.find("name").text] = int(skill.find("skill_mod").text)
    return skills

def parse_alignment(root: ET.Element) -> str:
    return root.find('basics/alignment/long').text

def parse_level(root: ET.Element) -> int:
    return int(root.find('basics/classes/levels_total').text)

def parse_archetypes(root: ET.Element) -> (str; ...):
    archetype_values = []
    for archetype in root.findall('basics/archetypes/archetype'):
        archetype_values.append(archetype.find("name").text)
    return tuple(archetype_values)

def parse_languages(root: ET.Element) -> (str; ...):
    language_values = []
    for language in root.findall('basics/languages/language'):
        language_values.append(language.text)
    return tuple([lang for lang in language_values if lang])

def parse_movement(root: ET.Element) -> (str; ...):
    movement_values = [0] * len(Movement)
    for movement in root.findall('basics/move/move'):
        movement_values[Movement[movement.find("name").text].value] = int(movement.find("squares").text) * 5
    return tuple(movement_values)

def parse_vision(root: ET.Element) -> dict[str, int]:
    vision = {}
    for curr_vision in root.findall('basics/vision/vision'):
        vision_list = curr_vision.text.split()
        vision[vision_list[0]] = int(vision_list[1].removeprefix("(").removesuffix(" ft)"))
    return vision

def parse_gold(root: ET.Element) -> int:
    return int(root.find('basics/gold').text)

def parse_stats(root: ET.Element) -> ((int; int); ...):
    print('Parsing stats')
    stat_values = [None] * len(Stats)
    for stat in root.findall('abilities/ability'):
        stat_values[Stats[stat.find("name/short").text].value] = int(stat.find('score').text)
    return tuple(stat_values)

def parse_saving_throws(root: ET.Element) -> (int; int; int):
    print('Parsing saving throws')
    throw_values = [None] * len(SavingThrows)
    for throw in root.findall('saving_throws/saving_throw'):
        throw_values[SavingThrows[throw.find("name/short").text].value] = int(throw.find('total').text)
    return tuple(throw_values)

def parse_melee(root: ET.Element) -> (int; ...):
    return tuple(map(int, root.find('attack/melee/total').text.split('/')))

def parse_ranged(root: ET.Element) -> (int; ...):
    return tuple(map(int, root.find('attack/ranged/total').text.split('/')))

def parse_cmb(root: ET.Element) -> dict[str, int]:
    cmb_map = {}
    cm_names = ['grapple_attack', 'trip_attack', 'disarm_attack', 'sunder_attack', 'bullrush_attack', 'overrun_attack']
    for name in cm_names:
        cmb_map[name] = int(root.find('attack/cmb/' + name).text)
    return cmb_map

def parse_cmd(root: ET.Element) -> dict[str, int]:
    cmd_map = {}
    cm_names = ['grapple_defense', 'trip_defense', 'disarm_defense', 'sunder_defense', 'bullrush_defense', 'overrun_defense']
    for name in cm_names:
        cmd_map[name] = int(root.find('attack/cmb/' + name).text)
    return cmd_map

def parse_weapons(root: ET.Element) -> dict[str, ((int; ...), str, str)]:
    weapons = {}
    unarmed_node = root.find('weapons/unarmed')
    weapons['Unarmed'] = (
        tuple(map(int, unarmed_node.find('total').text.split('/'))),
        unarmed_node.find('damage').text,
        unarmed_node.find('critical').text
    )
    for weapon in root.findall('weapons/weapon'):
        if 'Ranged' in weapon.find('common/category').text:
            continue
        damage = weapon.find('common/damage').text
        attack_bonus = tuple(map(int, weapon.find('common/to_hit/total_hit').text.split('/')))
        critical = weapon.find('common/critical/range').text + '/x' + weapon.find('common/critical/multiplier').text
        weapons[weapon.find('common/name/short').text.removeprefix('*')] = (...=attack_bonus, ...=damage, ...=critical)
    return weapons

def parse_ranged_weapons(root: ET.Element) -> dict[str, ((int; ...), str, str)]:
    weapons = {}
    for weapon in root.findall('weapons/weapon'):
        damage = weapon.find('common/damage').text
        attack_bonus = tuple(map(int, weapon.find('common/to_hit/total_hit').text.split('/')))
        critical = weapon.find('common/critical/range').text + '/' + weapon.find('common/critical/multiplier').text
        weapons[weapon.find('common/name/long').text] = (...=attack_bonus, ...=damage, ...=critical)
    return weapons

def parse_special_attacks(root: ET.Element) -> ((str; str); ...):
    attacks = []
    for attack in root.findall('special_attacks/special_attack'):
        attacks.append((name=attack.find('name').text, description=attack.find('description').text))
    return tuple(attacks)

def create_spell_from_node(spell_node: ET.Element, **kwargs) -> Spell:
    return Spell(
            name=spell_node.find("name").text,
            times_memorized=spell_node.find("times_memorized").text,
            spell_range=spell_node.find("range").text,
            casting_time=spell_node.find("castingtime").text,
            effect=spell_node.find("effect").text,
            time_units=spell_node.find("times_unit").text,
            dc=spell_node.find("dc").text,
            target=spell_node.find("target").text,
            save_info=spell_node.find("saveinfo").text,
            duration=spell_node.find("duration").text,
            **kwargs,
        )

def parse_spells(root: ET.Element) -> list[Spell]:
    spell_list = [
        create_spell_from_node(node)
        for node in root.findall('spells/memorized_spells/racial_innate_memorized/spell') :: root.findall('spells/memorized_spells/class_innate_memorized/spell')
    ]
    for spell_level_node in root.findall('spells/memorized_spells/spellbook/class/level'):
        level = spell_level_node.attrib["number"]
        for spell_node in spell_level_node.findall('spell'):
            spell = create_spell_from_node(spell_node, level=level)
            spell_list.append(spell)
    return spell_list

def parse_feats(root: ET.Element) -> ((str; str); ...):
    feats = []
    for feat in root.findall('feats/feat'):
        if feat.find('hidden').text == "F":
            benefit = ""
            if feat.find('benefit').text:
                benefit = feat.find('benefit').text
            else:
                benefit = feat.find('description').text
            feats.append((feat_name=feat.find('name').text, feat_benefit=benefit))
    return tuple(feats)

def parse_resistances(root: ET.Element) -> (str; ...):
    resistances = []
    for resistance in root.findall('resistances/resistance'):
            resistances.append(resistance.text)
    return tuple(resistances)

def parse_special_qualities(root: ET.Element) -> (str; set(str); (str; str)):
    immunities = []
    special_qualities = []
    spell_like_abilities = ""
    skipped_qualities = ['Bonus Feats', 'Outsider Traits', 'Resistance to']
    for quality in root.findall('special_qualities/special_quality'):
        name = quality.find('name').text

        skip = False
        for skipped_quality in skipped_qualities:
            if skipped_quality in name:
                skip = True
        if skip:
            continue

        if 'Immunity to ' in name:
            immunities.append(quality.find('aspect').text.removeprefix('Immunity: '))
        elif 'Spell-Like Abilities' in name:
            spell_like_abilities = quality.find('description').text
        else:
            special_qualities.append((name=name, description=quality.find('description').text))
    return spell_like_abilities, immunities, special_qualities

def parse_weapon_proficiences(root: ET.Element) -> str:
    return root.find("weapon_proficiencies").text

def parse_xml(input_file) -> Character:
    print('Parsing file to tree')
    tree = ET.parse(input_file)
    root = tree.getroot()
    spell_like_abilities, immunities, special_qualities = parse_special_qualities(root)
    char = Character(
        name=parse_name(root),
        alignment=parse_alignment(root),
        archetypes=parse_archetypes(root),
        char_classes=parse_classes(root),
        languages=parse_languages(root),
        movement=parse_movement(root),
        # vision=parse_vision(root),
        gold=parse_gold(root),
        curr_gold=parse_gold(root),
        stats=parse_stats(root),
        max_hp=parse_hp(root),
        current_hp=parse_hp(root),
        ac=parse_ac(root),
        initiative=parse_initiative(root),
        spell_resistance=parse_spell_resistance(root),
        skills=parse_skills(root),
        saving_throws=parse_saving_throws(root),
        melee=parse_melee(root),
        ranged=parse_ranged(root),
        cmb=parse_cmb(root),
        cmd=parse_cmd(root),
        weapons=parse_weapons(root),
        damage_reduction=parse_damage_reduction(root),
        spells=parse_spells(root),
        level=parse_level(root),
        feats=parse_feats(root),
        resistances=parse_resistances(root),
        spell_like_abilities=spell_like_abilities,
        immunities=immunities,
        special_abilities=special_qualities,
        special_attacks=parse_special_attacks(root),
        weapon_proficiencies=parse_weapon_proficiences(root),
    )
    print(char)
    return char
